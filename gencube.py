import numpy as np
from global_constant import *

# systems = ["benzene", "cni", "pd", "sa", "tpacho", "tpe", "tpp", "hr"]
# res_levels = [1,2,4,8]

# BATCH_SIZE = 8
# bs = BATCH_SIZE

# SAMPLE_LENGTH = 4
# kl = SAMPLE_LENGTH

# dl = 1.5
# res_level = 4
# rl = res_level

# system = load_system(systems[6], res_levels[2])

# atoms = system["atoms"]
# coords = system["coords"]

def gen_cube(filename, mol, grids, res_level = RESOLUTION, margin_ratio = 2.0, box_size = BOX_SIZE):

    coords = mol.get_coordinates()
    atoms = mol.get_atoms()

    xs = [coord[0] for coord in coords]
    ys = [coord[1] for coord in coords]
    zs = [coord[2] for coord in coords]

    print(f"Generating grids ...")

    len_x = max(xs) - min(xs)
    len_y = max(ys) - min(ys)
    len_z = max(zs) - min(zs)

    cx = min(xs) + len_x / 2
    cy = min(ys) + len_y / 2
    cz = min(zs) + len_z / 2

    box_x = np.ceil(len_x * margin_ratio) if np.ceil(len_x * margin_ratio) > 16 else 16
    box_y = np.ceil(len_y * margin_ratio) if np.ceil(len_y * margin_ratio) > 16 else 16
    box_z = np.ceil(len_z * margin_ratio) if np.ceil(len_z * margin_ratio) > 16 else 16

    box_x = np.ceil(box_x / box_size) * box_size
    box_y = np.ceil(box_y / box_size) * box_size
    box_z = np.ceil(box_z / box_size) * box_size

    print(f"Center at {cx, cy, cz} with box {box_x, box_y, box_z}.")

    stride = 1 / res_level

    ox = cx - box_x / 2
    oy = cy - box_y / 2
    oz = cz - box_z / 2

    grids = grids
    xg, yg, zg = grids.shape

    print(xg, yg, zg)

    with open(filename, "w") as f:
        f.write("Generated by JUN\n")
        f.write(f"Total {grids.shape} grids\n")

        f.write(f"{len(atoms)}\t{ox:.6f}\t{oy:.6f}\t{oz:.6f}\n")
        f.write(f"{xg:.0f}\t{stride:.6f}\t0.000000\t0.000000\n")
        f.write(f"{yg:.0f}\t0.000000\t{stride:.6f}\t0.000000\n")
        f.write(f"{zg:.0f}\t0.000000\t0.000000\t{stride:.6f}\n")

        for a in range(len(atoms)):
            f.write(f"{atoms[a]}\t{atoms[a]:.6f}\t{xs[a]}\t{ys[a]}\t{zs[a]}\n")

        for i in range(xg):
            for j in range(yg):
                for k in range(zg):
                    if (k + 1) % 6 == 0 or (k + 1) == zg:
                        f.write(f"{grids[i,j,k]:.5e}\n")
                    else:
                        f.write(f"{grids[i,j,k]:.5e}\t")